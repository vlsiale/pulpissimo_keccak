// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package keccak_reg_pkg;

  // Param list
  parameter int din = 2;
  parameter int dout = 2;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [31:0] q;
  } keccak_reg2hw_din_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } off;
    struct packed {
      logic        q;
      logic        qe;
    } on;
  } keccak_reg2hw_start_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } not_valid;
    struct packed {
      logic        q;
      logic        qe;
    } valid;
  } keccak_reg2hw_din_valid_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } not_valid;
    struct packed {
      logic        q;
      logic        qe;
    } valid;
  } keccak_reg2hw_dout_valid_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } not_full;
    struct packed {
      logic        q;
      logic        qe;
    } full;
  } keccak_reg2hw_buffer_full_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } not_over;
    struct packed {
      logic        q;
      logic        qe;
    } over;
  } keccak_reg2hw_last_block_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } not_ready;
    struct packed {
      logic        q;
      logic        qe;
    } ready;
  } keccak_reg2hw_ready_reg_t;


  typedef struct packed {
    logic [31:0] d;
  } keccak_hw2reg_dout_mreg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    keccak_reg2hw_din_mreg_t [1:0] din; // [88:25]
    keccak_reg2hw_start_reg_t start; // [24:21]
    keccak_reg2hw_din_valid_reg_t din_valid; // [20:17]
    keccak_reg2hw_dout_valid_reg_t dout_valid; // [16:13]
    keccak_reg2hw_buffer_full_reg_t buffer_full; // [12:9]
    keccak_reg2hw_last_block_reg_t last_block; // [8:5]
    keccak_reg2hw_ready_reg_t ready; // [4:1]
  } keccak_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    keccak_hw2reg_dout_mreg_t [1:0] dout; // [64:1]
  } keccak_hw2reg_t;

  // Register Address
  parameter logic [5:0] KECCAK_DIN_0_OFFSET = 6'h 0;
  parameter logic [5:0] KECCAK_DIN_1_OFFSET = 6'h 4;
  parameter logic [5:0] KECCAK_DOUT_0_OFFSET = 6'h 8;
  parameter logic [5:0] KECCAK_DOUT_1_OFFSET = 6'h c;
  parameter logic [5:0] KECCAK_START_OFFSET = 6'h 10;
  parameter logic [5:0] KECCAK_DIN_VALID_OFFSET = 6'h 14;
  parameter logic [5:0] KECCAK_DOUT_VALID_OFFSET = 6'h 18;
  parameter logic [5:0] KECCAK_BUFFER_FULL_OFFSET = 6'h 1c;
  parameter logic [5:0] KECCAK_LAST_BLOCK_OFFSET = 6'h 20;
  parameter logic [5:0] KECCAK_READY_OFFSET = 6'h 24;


  // Register Index
  typedef enum int {
    KECCAK_DIN_0,
    KECCAK_DIN_1,
    KECCAK_DOUT_0,
    KECCAK_DOUT_1,
    KECCAK_START,
    KECCAK_DIN_VALID,
    KECCAK_DOUT_VALID,
    KECCAK_BUFFER_FULL,
    KECCAK_LAST_BLOCK,
    KECCAK_READY
  } keccak_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KECCAK_PERMIT [10] = '{
    4'b 1111, // index[0] KECCAK_DIN_0
    4'b 1111, // index[1] KECCAK_DIN_1
    4'b 1111, // index[2] KECCAK_DOUT_0
    4'b 1111, // index[3] KECCAK_DOUT_1
    4'b 0001, // index[4] KECCAK_START
    4'b 0001, // index[5] KECCAK_DIN_VALID
    4'b 0001, // index[6] KECCAK_DOUT_VALID
    4'b 0001, // index[7] KECCAK_BUFFER_FULL
    4'b 0001, // index[8] KECCAK_LAST_BLOCK
    4'b 0001  // index[9] KECCAK_READY
  };
endpackage

